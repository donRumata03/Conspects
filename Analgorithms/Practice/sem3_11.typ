#import "../algo.typ": *

 
#show: project.with(
  title: 
  "ДЗ 10 
(криптография и теория чисел)"
)

#counter(heading).update(3)

= Двумерные пластины

Сделаем теперь двумерное преобразование Фурье: заведём виртуальные переменные, а не реальные:

- сопоставим точке $i, j$ на пластине степень $x^(i + 2n j)$ многочлена.
- произведём одномерное преобразование Фурье над полученным многочленом.
- восстановим «двумерные» коэфициенты: $
[x^(i + 2n j)] C = sum_(i + 2n j = k_1 + k_2 + 2n (l_1 + l_2)) a_(k_1, l_1) b_(k_2, l_2) = sum_(k_1 = 0)^i sum_(l_1 = 0)^j a_(k_1, l_1) b_(i - k_1, j - l_1)
$

→ Научились перемножать двумерные многочлены за $O(n^2 log n)$ (так как преобразованике Фурье над $2n^2$ членами).

Теперь 
- развернём вторую пластину по обеим осям,
- два раза (или один) посчитаем скалярное произведение
- найдём те позиции, где оказался ноль


= Расстояние Хэмминга

= Периоды

#lemma[
Характеристическое свойство периода $p$ строки $s$: $s[p...) = s[...n - p)$, то есть проверяем одним махом, что $forall i: s[i] = s[i + p]$.
]

Тогда проверим это для всех $p$, посчитав такие скалярные произведения для всех сдвигов:

- Количество позиций, где $s > s'$, где в $s: „?“ → „0“$, а в в $s': „?“ → „1“$
- Количество позиций, где $s < s'$, аналогично.

Те сдвиги, где оба условия выполнены, являются периодами.

#pagebreak()

= Троичный DFFT

$p = 3^k q + 1$, подразумевается, что подобрано простое число такого вида для $n = 3^k$ — многочлены такой длины хотим преобразовывать.

Возьмём $omega = g^((p - 1)/n) = q$, тогда будет $
underbrace(
  underbrace(omega^0, =1) underbrace(omega^1 …, ≠1)
  , n - 1 "штук")
$

Заметим, что

$
A(x) = underbrace(A_(ident_3 0)(x^3), ≈n / 3) + x underbrace(A_(ident_3 1)(x^3), ≈n / 3) + x^2 underbrace(A_(ident_3 2)(x^3), ≈n / 3)
$

Тогда посчитаем 3 преобразования с $omega^3$ и $n / 3$ и 

`
for i in 0..n / 3 - 1
  f_i = f'_i + omega^i f''i + omega^(2i) f'''
  f_(i + n/3) = f'_i + omega^(i + n/3) f''i + (omega^(i + n/3))^2 f'''
  f_(i + 2 n/3) = f'_i + omega^(i + 2 n/3) f''i + (omega^(i + 2 n/3))^2 f'''

`